!yamlscript/v0

# (require '[babashka.pods :as pods])
# (pods/load-pod 'org.babashka/instaparse "0.0.4")

use-pod: q(org::babashka/instaparse) '0.0.4'

# (ns noob.instayaml
#   (:require [pod.babashka.instaparse :as insta]
#             [clj-yaml.core :as yaml]
#             [clojure.walk :as walk]
#             [clojure.pprint :as pp]
#             [clojure.java.io :as io]))

use pod::babashka::instaparse: :as insta

# (defn vector-to-map [data]
#   (walk/postwalk
#   (fn [x]
#     (if (and (vector? x) (keyword? (first x)))
#       {(first x) (if (= 2 (count x)) (second x) (vec (rest x)))}
#       x))
#   data))

defn vector-to-map(data):
  walk/postwalk _ data:
    fn(x):
      if x:vector? && x:first:keyword?:
        M+: first(x) (x.# == 2).if(second(x) x:rest:V)
        else: x

# (defn vector-to-yaml-string [parsed-result]
#   (yaml/generate-string (vector-to-map parsed-result) :dumper-options {:flow-style :block}))

defn vector-to-yaml-string(parsed-result):
  yaml/dump: vector-to-map(parsed-result)

# (defn instayaml [expr input]
#   (let [parsed (insta/parse (insta/parser expr) input)]
#     (vector-to-yaml-string parsed)))

defn instayaml(expr input):
  parsed =:
    insta/parse _ input:
      insta/parser: expr
  vector-to-yaml-string: parsed

# (defn instayaml-to-file [expr input filename]
#   (with-open [writer (io/writer filename)]
#     (.write writer (instayaml expr input))))

defn instayaml-to-file(expr input filename):
  spit filename:
    instayaml: expr input

# (print (instayaml
#     "Lambda  = Params <'=>'> Expression
#     Params   = <'('> VarList <')'>
#     <VarList>  = Var (<','> Var)*
#     Expression = Term (Op Term)*
#     Term    = Var | Number | '(' Expression ')'
#     Op       = '*' | '/' | '+' | '-' | '>' | '<' | '==' | '&&' | '||'
#     <Var>      = #'[a-zA-Z_][a-zA-Z0-9_]*'
#     Number   = #'[0-9]+'"
#     "(foo,bar,zyx)=>foo+bar>zyx"))

say:
  instayaml _ '(foo,bar,zyx)=>foo+bar>zyx': |
    Lambda = Params <'=>'> Expression
    Params = <'('> VarList <')'>
    <VarList> = Var (<','> Var)*
    Expression = Term (Op Term)*
    Term   = Var | Number | '(' Expression ')'
    Op     = '*' | '/' | '+' | '-' | '>' | '<' | '==' | '&&' | '||'
    <Var>  = #'[a-zA-Z_][a-zA-Z0-9_]*'
    Number = #'[0-9]+'"

# (instayaml-to-file "S = VAL | EXPR | PAR
#                   PAR = <'('> S <')'>
#                   <EXPR> = S OP S
#                   <VAL> = #'[0-9]+'
#                   OP = '+' | '-' | '*' | '/'"
#                   "1+(5/3)*2"
#                   "output.yaml")

instayaml-to-file _ '1+(5/3)*2' 'output.yaml': |
  S = VAL | EXPR | PAR
  PAR = <'('> S <')'>
  <EXPR> = S OP S
  <VAL> = #'[0-9]+'
  OP = '+' | '-' | '*' | '/'"
